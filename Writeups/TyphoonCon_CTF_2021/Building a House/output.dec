// Function 2
fn __wasm_call_ctors() {
    emscripten_stack_init();
}

// Function 3
fn emscripten_heap_init() {
    let var_0: i32;
    let var_1: i32;
    let var_2: i32;
    let var_3: i32;
    let var_4: i32;
    
    var_0 = global_0 - 32;
    var_1 = global_0 - 32;
    global_0 = var_1;
    store<i32>(var_0 + 28, 1029)
    store<i32>(var_0 + 24, 1424)
    var_2 = load<i32>(var_0 + 24);
    store_8<i32>(var_0 + 21, 105)
    store_8<i32>(var_0 + 22, 105)
    store_8<i32>(var_0 + 23, 0)
    var_3 = load<i32>(var_0 + 28);
    store<i32>(var_0 + 4, 200)
    store<i32>(var_0, var_3)
    var_4 = var_0 + 21;
    env.emscripten_asm_const_int(var_2, var_4, var_0);
    global_0 = var_0 + 32;
    return;
}

// Function 4
fn func_4(arg_0: i32, arg_1: i32, arg_2: i32) -> i32 {
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    let var_14: i32;
    let var_15: i32;
    let var_16: i32;
    let var_17: i32;
    
    var_3 = global_0 - 176;
    var_4 = global_0 - 176;
    global_0 = var_4;
    store<i32>(var_3 + 172, arg_0)
    store<i32>(var_3 + 168, arg_1)
    store<i32>(var_3 + 164, arg_2)
    var_5 = var_3 + 48;
    func_11(var_5, 1264, 107);
    store<i32>(var_3 + 44, 0)
    while true {
        var_6 = load<i32>(var_3 + 44) <u 107;
        if (var_6 & 1) == 0 {
            break;
        }
        var_7 = load<i32>(var_3 + 44);
        var_8 = load_8u<i32>(var_3 + 48 + var_7);
        var_9 = var_8 << 24 >>s 24 ^ 61;
        var_10 = load<i32>(var_3 + 44);
        store_8<i32>(var_3 + 48 + var_10, var_9 & 255)
        var_11 = load<i32>(var_3 + 44) + 1;
        store<i32>(var_3 + 44, var_11)
    }
    store<i32>(var_3 + 36, 1532)
    var_12 = load<i32>(var_3 + 36);
    store_8<i32>(var_3 + 30, 105)
    store_8<i32>(var_3 + 31, 105)
    store_8<i32>(var_3 + 32, 105)
    store_8<i32>(var_3 + 33, 105)
    store_8<i32>(var_3 + 34, 105)
    store_8<i32>(var_3 + 35, 0)
    var_13 = load<i32>(var_3 + 172);
    var_14 = load<i32>(var_3 + 168);
    var_15 = load<i32>(var_3 + 164);
    store<i32>(var_3 + 16, 107)
    store<i32>(var_3 + 12, var_3 + 48)
    store<i32>(var_3 + 8, var_15)
    store<i32>(var_3 + 4, var_14)
    store<i32>(var_3, var_13)
    var_16 = var_3 + 30;
    var_17 = env.emscripten_asm_const_int(var_12, var_16, var_3);
    store<i32>(var_3 + 40, var_17)
    global_0 = var_3 + 176;
    return load<i32>(var_3 + 40);
}

// Function 5
fn func_5(arg_0: i32, arg_1: i32, arg_2: i32) -> i32 {
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    
    var_3 = global_0 - 48;
    var_4 = global_0 - 48;
    global_0 = var_4;
    store<i32>(var_3 + 44, arg_0)
    store<i32>(var_3 + 40, arg_1)
    store<i32>(var_3 + 36, arg_2)
    store<i32>(var_3 + 28, 1795)
    var_5 = load<i32>(var_3 + 28);
    store_8<i32>(var_3 + 24, 105)
    store_8<i32>(var_3 + 25, 105)
    store_8<i32>(var_3 + 26, 105)
    store_8<i32>(var_3 + 27, 0)
    var_6 = load<i32>(var_3 + 44);
    var_7 = load<i32>(var_3 + 40);
    var_8 = load<i32>(var_3 + 36);
    store<i32>(var_3 + 8, var_8)
    store<i32>(var_3 + 4, var_7)
    store<i32>(var_3, var_6)
    var_9 = var_3 + 24;
    var_10 = env.emscripten_asm_const_int(var_5, var_9, var_3);
    store<i32>(var_3 + 32, var_10)
    global_0 = var_3 + 48;
    return load<i32>(var_3 + 32);
}

// Function 6
fn func_6(arg_0: i32, arg_1: i32) -> i32 {
    let var_2: i32;
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    let var_14: i32;
    let var_15: i32;
    let var_16: i32;
    let var_17: i32;
    let var_18: i32;
    let var_19: i32;
    let var_20: i32;
    
    store<i32>(global_0 - 32 + 24, arg_0)
    store<i32>(global_0 - 32 + 20, arg_1)
    var_2 = global_0 - 32 + 15 + 4;
    var_3 = load_8u<i32>(0 + 1375);
    store_8<i32>(var_2, var_3)
    var_4 = load<i32>(0 + 1371);
    store<i32>(global_0 - 32 + 15, var_4)
    store<i32>(global_0 - 32 + 8, 0)
    while true {
        var_5 = load<i32>(global_0 - 32 + 8);  // counter
        var_6 = load<i32>(global_0 - 32 + 20); // range --> arg1
        if (var_5 <s var_6 & 1) == 0 {
            store<i32>(global_0 - 32 + 28, 1)
            break;
        }
        var_7 = load<i32>(global_0 - 32 + 24);  // arg0
        var_8 = load<i32>(global_0 - 32 + 8);   // counter
        var_9 = load_8u<i32>(var_7 - var_8 + 2880); // input [arg0 - counter] --> x1
        var_10 = load<i32>(global_0 - 32 + 24);
        var_11 = load<i32>(global_0 - 32 + 8);
        var_12 = var_10 - var_11 - 1;
        var_13 = load_8u<i32>(var_12 + 2880) << 24; // input [arg0 - counter - 1] --> x2
        var_14 = var_13 >>s 24;
        var_15 = (var_9 << 24 >>s 24) - var_14; // x1 - x2
        var_16 = load<i32>(global_0 - 32 + 8);
        var_17 = global_0 - 32 + 15 + var_16;
        var_18 = load_8u<i32>(var_17) << 24 >>s 24;
        if (var_15 != var_18 & 1) == 0 {
            store<i32>(global_0 - 32 + 28, 0)
            break;
        }
        var_19 = load<i32>(global_0 - 32 + 8); // update counter
        store<i32>(global_0 - 32 + 8, var_19 + 1)
    }
    var_20 = load<i32>(global_0 - 32 + 28);
    return var_20;
}

// Function 7
fn func_7(arg_0: i32, arg_1: i32, arg_2: i32) -> i32 {
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    
    var_3 = global_0 - 48;
    var_4 = global_0 - 48;
    global_0 = var_4;
    store<i32>(var_3 + 44, arg_0)
    store<i32>(var_3 + 40, arg_1)
    store<i32>(var_3 + 36, arg_2)
    store<i32>(var_3 + 28, 2521)
    var_5 = load<i32>(var_3 + 28);
    store_8<i32>(var_3 + 24, 105)
    store_8<i32>(var_3 + 25, 105)
    store_8<i32>(var_3 + 26, 105)
    store_8<i32>(var_3 + 27, 0)
    var_6 = load<i32>(var_3 + 44);
    var_7 = load_8u<i32>(var_6 + 2880) << 24;
    var_8 = load<i32>(var_3 + 40);
    var_9 = load_8u<i32>(var_8 + 2880) << 24;
    var_10 = load<i32>(var_3 + 36);
    var_11 = load_8u<i32>(var_10 + 2880) << 24;
    store<i32>(var_3 + 8, var_11 >>s 24)
    store<i32>(var_3 + 4, var_9 >>s 24)
    store<i32>(var_3, var_7 >>s 24)
    var_12 = var_3 + 24;
    var_13 = env.emscripten_asm_const_int(var_5, var_12, var_3);
    store<i32>(var_3 + 32, var_13)
    global_0 = var_3 + 48;
    return load<i32>(var_3 + 32);
}

// Function 8
fn func_8(arg_0: i32) -> i32 {
    let var_1: i32;
    let var_2: i32;
    let var_3: i32;
    let var_4: i64;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    let var_14: i32;
    let var_15: i32;
    let var_16: i32;
    let var_17: i32;
    let var_18: i32;
    let var_19: i32;
    
    store<i32>(global_0 - 32 + 24, arg_0)
    var_1 = global_0 - 32 + 19 + 4;
    var_2 = load_8u<i32>(0 + 1028);
    store_8<i32>(var_1, var_2)
    var_3 = load<i32>(0 + 1024);
    store<i32>(global_0 - 32 + 19, var_3)
    var_4 = load<i64>(0 + 1376);
    store<i64>(global_0 - 32 + 11, var_4)
    store<i32>(global_0 - 32 + 4, 0)
    while true {
        var_5 = load<i32>(global_0 - 32 + 4); // counter
        if (var_5 <s 8 & 1) == 0 {
            store<i32>(global_0 - 32 + 28, 1)
            break;
        }
        var_6 = load<i32>(global_0 - 32 + 24);
        var_7 = load<i32>(global_0 - 32 + 4);
        var_8 = load_8u<i32>(var_6 + var_7 + 2880); // input[arg + counter] --> x
        var_9 = load<i32>(global_0 - 32 + 4);
        var_10 = rem_s(var_9, 4);
        var_11 = global_0 - 32 + 19 + var_10;
        var_12 = load_8u<i32>(var_11) & 255;
        var_13 = var_8 << 24 >>s 24 ^ var_12; // x ^ var_12
        var_14 = load<i32>(global_0 - 32 + 4);
        var_15 = global_0 - 32 + 11 + var_14;
        var_16 = load_8u<i32>(var_15) & 255;
        var_17 = var_13 + 1 != var_16 & 1; // (x ^ var_12) + 1 != var_16
        if var_17 == 0 {
            store<i32>(global_0 - 32 + 28, 0)
            break;
        }
        var_18 = load<i32>(global_0 - 32 + 4);
        store<i32>(global_0 - 32 + 4, var_18 + 1)
    }
    var_19 = load<i32>(global_0 - 32 + 28);
    return var_19;
}

// Function 9
fn __syscall15(arg_0: i32) {
    let var_1: i32;
    let var_2: i32;
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    let var_14: i32;
    let var_15: i32;
    let var_16: i32;
    let var_17: i32;
    
    var_1 = global_0 - 64;
    var_2 = global_0 - 64;
    global_0 = var_2;
    store<i32>(var_1 + 60, arg_0)
    if load<i32>(var_1 + 60) {
        store<i32>(var_1 + 56, 1230)
        store<i32>(var_1 + 52, 10)
    }
    else {
        store<i32>(var_1 + 56, 1241)
        store<i32>(var_1 + 52, 8)
    }
    store<i32>(var_1 + 48, 2656)
    var_3 = load<i32>(var_1 + 48);
    store_8<i32>(var_1 + 45, 105)
    store_8<i32>(var_1 + 46, 105)
    store_8<i32>(var_1 + 47, 0)
    var_4 = load<i32>(var_1 + 56);
    var_5 = load<i32>(var_1 + 52);
    store<i32>(var_1 + 20, var_5)
    store<i32>(var_1 + 16, var_4)
    var_6 = var_1 + 45;
    var_7 = var_1 + 16;
    env.emscripten_asm_const_int(var_3, var_6, var_7);
    var_8 = load<i32>(var_1 + 60) == 1;
    if (var_8 & 1) != 0 {
        store<i32>(var_1 + 40, 0)
        while true {
            var_9 = load<i32>(var_1 + 40) <s 32;
            if (var_9 & 1) == 0 {
                break;
            }
            var_10 = load<i32>(var_1 + 40);
            var_11 = load_8u<i32>(var_10 + 2880) << 24;
            var_12 = load<i32>(var_1 + 40);
            var_13 = load<i32>(var_1 + 40);
            var_14 = load_8u<i32>(var_13 + 1392) & 255;
            store_8<i32>(var_12 + 1392, var_14 ^ var_11 >>s 24)
            var_15 = load<i32>(var_1 + 40) + 1;
            store<i32>(var_1 + 40, var_15)
        }
        store<i32>(var_1 + 36, 2759)
        var_16 = load<i32>(var_1 + 36);
        store_8<i32>(var_1 + 33, 105)
        store_8<i32>(var_1 + 34, 105)
        store_8<i32>(var_1 + 35, 0)
        store<i32>(var_1 + 4, 32)
        store<i32>(var_1, 1392)
        var_17 = var_1 + 33;
        env.emscripten_asm_const_int(var_16, var_17, var_1);
    }
    global_0 = var_1 + 64;
    return;
}

// Function 10
fn __syscall12(arg_0: i32) -> i32 {
    let var_1: i32;
    let var_2: i32;
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    let var_14: i32;
    let var_15: i32;
    let var_16: i32;
    let var_17: i32;
    let var_18: i32;
    let var_19: i32;
    let var_20: i32;
    let var_21: i32;
    let var_22: i32;
    let var_23: i32;
    let var_24: i32;
    let var_25: i32;
    let var_26: i32;
    let var_27: i32;
    let var_28: i32;
    let var_29: i32;
    let var_30: i32;
    let var_31: i32;
    let var_32: i32;
    let var_33: i32;
    let var_34: i32;
    let var_35: i32;
    let var_36: i32;
    let var_37: i32;
    let var_38: i32;
    let var_39: i32;
    let var_40: i32;
    let var_41: i32;
    let var_42: i32;
    let var_43: i32;
    let var_44: i32;
    let var_45: i32;
    let var_46: i32;
    let var_47: i32;
    let var_48: i32;
    let var_49: i32;
    let var_50: i32;
    let var_51: i32;
    let var_52: i32;
    let var_53: i32;
    let var_54: i32;
    let var_55: i32;
    let var_56: i32;
    let var_57: i32;
    let var_58: i32;
    let var_59: i32;
    let var_60: i32;
    let var_61: i32;
    let var_62: i32;
    
    var_1 = global_0 - 16;
    var_2 = global_0 - 16;
    global_0 = var_2;
    store<i32>(var_1 + 8, arg_0)
    store<i32>(var_1 + 4, 0)
    while true {
        var_3 = load<i32>(var_1 + 4) <s 32;
        if (var_3 & 1) == 0 {
            break;
        }
        var_4 = load<i32>(var_1 + 8);
        var_5 = var_4 + load<i32>(var_1 + 4);
        var_6 = load_8u<i32>(var_5);
        var_7 = load<i32>(var_1 + 4);
        store_8<i32>(var_7 + 2880, var_6)
        var_8 = load<i32>(var_1 + 4) + 1;
        store<i32>(var_1 + 4, var_8)
    }
    var_9 = load_8u<i32>(0 + 2880) << 24;
    var_10 = var_9 >>s 24 != 71 & 1;
    if var_10 == 0 {
        var_11 = load_8u<i32>(0 + 2881) << 24;
        var_12 = var_11 >>s 24 != 70 & 1;
        if var_12 == 0 {
            var_13 = load_8u<i32>(0 + 2882) << 24;
            var_14 = var_13 >>s 24 != 36 & 1;
            if var_14 == 0 {
                var_15 = load_8u<i32>(0 + 2883) << 24;
                var_16 = var_15 >>s 24 != 56 & 1;
                if var_16 == 0 {
                    var_17 = load_8u<i32>(0 + 2911) << 24;
                    var_18 = var_17 >>s 24 != 82 & 1;
                    if var_18 == 0 {
                        var_19 = load_8u<i32>(0 + 2889) << 24;
                        var_20 = load_8u<i32>(0 + 2907) << 24;
                        var_21 = load_8u<i32>(0 + 2881) << 24;
                        var_22 = var_19 >>s 24;
                        var_23 = var_20 >>s 24;
                        var_24 = var_21 >>s 24;
                        var_25 = func_5(var_22, var_23, var_24);
                        if var_25 {
                            var_26 = load_8u<i32>(0 + 2894) << 24;
                            var_27 = load_8u<i32>(0 + 2898) << 24;
                            var_28 = load_8u<i32>(0 + 2911) << 24;
                            var_29 = var_26 >>s 24;
                            var_30 = var_27 >>s 24;
                            var_31 = var_28 >>s 24;
                            var_32 = func_5(var_29, var_30, var_31);
                            if var_32 {
                                var_33 = load_8u<i32>(0 + 2889) << 24;
                                var_34 = load_8u<i32>(0 + 2898) << 24;
                                var_35 = (var_33 >>s 24) - (var_34 >>s 24);
                                if (var_35 != -12 & 1) == 0 {
                                    var_36 = load_8u<i32>(0 + 2907) << 24;
                                    var_37 = load_8u<i32>(0 + 2894) << 24;
                                    var_38 = (var_36 >>s 24) + (var_37 >>s 24);
                                    if (var_38 != 216 & 1) == 0 {
                                        var_39 = load_8u<i32>(0 + 2908) << 24;
                                        var_40 = var_39 >>s 24;
                                        var_41 = func_4(var_40, 5, 233);
                                        if var_41 {
                                            var_42 = load_8u<i32>(0 + 2895) << 24;
                                            var_43 = var_42 >>s 24;
                                            var_44 = func_4(var_43, 3, 178);
                                            if var_44 {
                                                var_45 = load_8u<i32>(0 + 2890) << 24;
                                                var_46 = var_45 >>s 24;
                                                var_47 = func_4(var_46, 7, 155);
                                                if var_47 {
                                                    var_48 = func_6(8, 5);
                                                    if var_48 {
                                                        var_49 = func_7(11, 12, 13);
                                                        if var_49 {
                                                            var_50 = load_8u<i32>(0 + 2896) << 24;
                                                            var_51 = load_8u<i32>(0 + 2897) << 24;
                                                            var_52 = var_50 >>s 24 & var_51 >>s 24;
                                                            if (var_52 != 53 & 1) == 0 {
                                                                var_53 = load_8u<i32>(0 + 2897) << 24;
                                                                var_54 = load_8u<i32>(0 + 2909) << 24;
                                                                var_55 = (var_53 >>s 24) - (var_54 >>s 24);
                                                                if (var_55 != -15 & 1) == 0 {
                                                                    var_56 = load_8u<i32>(0 + 2909) << 24;
                                                                    var_57 = load_8u<i32>(0 + 2910) << 24;
                                                                    var_58 = (var_56 >>s 24) | (var_57 >>s 24);
                                                                    if (var_58 != 116 & 1) == 0 {
                                                                        var_59 = load_8u<i32>(0 + 2910) << 24;
                                                                        var_60 = load_8u<i32>(0 + 2896) << 24;
                                                                        var_61 = (var_59 >>s 24) + (var_60 >>s 24);
                                                                        if (var_61 != 107 & 1) == 0 {
                                                                            var_62 = func_8(19);
                                                                            if var_62 {
                                                                                store<i32>(var_1 + 12, 1)
                                                                            }
                                                                            else {
                                                                                store<i32>(var_1 + 12, 0)
                                                                            }
                                                                        }
                                                                        else {
                                                                            store<i32>(var_1 + 12, 0)
                                                                        }
                                                                    }
                                                                    else {
                                                                        store<i32>(var_1 + 12, 0)
                                                                    }
                                                                }
                                                                else {
                                                                    store<i32>(var_1 + 12, 0)
                                                                }
                                                            }
                                                            else {
                                                                store<i32>(var_1 + 12, 0)
                                                            }
                                                        }
                                                        else {
                                                            store<i32>(var_1 + 12, 0)
                                                        }
                                                    }
                                                    else {
                                                        store<i32>(var_1 + 12, 0)
                                                    }
                                                }
                                                else {
                                                    store<i32>(var_1 + 12, 0)
                                                }
                                            }
                                            else {
                                                store<i32>(var_1 + 12, 0)
                                            }
                                        }
                                        else {
                                            store<i32>(var_1 + 12, 0)
                                        }
                                    }
                                    else {
                                        store<i32>(var_1 + 12, 0)
                                    }
                                }
                                else {
                                    store<i32>(var_1 + 12, 0)
                                }
                            }
                            else {
                                store<i32>(var_1 + 12, 0)
                            }
                        }
                        else {
                            store<i32>(var_1 + 12, 0)
                        }
                    }
                    else {
                        store<i32>(var_1 + 12, 0)
                    }
                }
                else {
                    store<i32>(var_1 + 12, 0)
                }
            }
            else {
                store<i32>(var_1 + 12, 0)
            }
        }
        else {
            store<i32>(var_1 + 12, 0)
        }
    }
    else {
        store<i32>(var_1 + 12, 0)
    }
    global_0 = var_1 + 16;
    return load<i32>(var_1 + 12);
}

// Function 11
fn func_11(arg_0: i32, arg_1: i32, arg_2: i32) -> i32 {
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    let var_10: i32;
    let var_11: i32;
    let var_12: i32;
    let var_13: i32;
    let var_14: i32;
    let var_15: i32;
    let var_16: i32;
    let var_17: i32;
    let var_18: i32;
    let var_19: i32;
    let var_20: i32;
    let var_21: i32;
    let var_22: i32;
    let var_23: i32;
    let var_24: i32;
    let var_25: i32;
    let var_26: i32;
    let var_27: i32;
    let var_28: i32;
    
    if arg_2 <u 512 {
        var_3 = arg_0 + arg_2;
        if (arg_1 ^ arg_0) & 3 {
            if arg_0 + arg_2 >=u 4 {
                var_4 = arg_0 + arg_2 + -4;
                if arg_0 + arg_2 + -4 >=u arg_0 {
                    arg_2 = arg_0;
                    do {
                        var_5 = load_8u<i32>(arg_1);
                        store_8<i32>(arg_2, var_5)
                        var_6 = load_8u<i32>(arg_1 + 1);
                        store_8<i32>(arg_2 + 1, var_6)
                        var_7 = load_8u<i32>(arg_1 + 2);
                        store_8<i32>(arg_2 + 2, var_7)
                        var_8 = load_8u<i32>(arg_1 + 3);
                        store_8<i32>(arg_2 + 3, var_8)
                        arg_1 += 4;
                        arg_2 += 4;
                    } while arg_2 + 4 <=u var_4;
                }
                else {
                    arg_2 = arg_0;
                }
            }
            else {
                arg_2 = arg_0;
            }
        }
        else {
            if arg_0 & 3 {
                if arg_2 >=s 1 {
                    arg_2 = arg_0;
                    while true {
                        var_9 = load_8u<i32>(arg_1);
                        store_8<i32>(arg_2, var_9)
                        arg_1 += 1;
                        arg_2 += 1;
                        if (arg_2 + 1 & 3) == 0 {
                            break;
                        }
                        if arg_2 + 1 >=u arg_0 + arg_2 {
                            break;
                        }
                    }
                }
                else {
                    arg_2 = arg_0;
                }
            }
            else {
                arg_2 = arg_0;
            }
            if (var_3 & -4) >=u 64 {
                if arg_2 <=u (var_3 & -4) + -64 {
                    do {
                        var_10 = load<i32>(arg_1);
                        store<i32>(arg_2, var_10)
                        var_11 = load<i32>(arg_1 + 4);
                        store<i32>(arg_2 + 4, var_11)
                        var_12 = load<i32>(arg_1 + 8);
                        store<i32>(arg_2 + 8, var_12)
                        var_13 = load<i32>(arg_1 + 12);
                        store<i32>(arg_2 + 12, var_13)
                        var_14 = load<i32>(arg_1 + 16);
                        store<i32>(arg_2 + 16, var_14)
                        var_15 = load<i32>(arg_1 + 20);
                        store<i32>(arg_2 + 20, var_15)
                        var_16 = load<i32>(arg_1 + 24);
                        store<i32>(arg_2 + 24, var_16)
                        var_17 = load<i32>(arg_1 + 28);
                        store<i32>(arg_2 + 28, var_17)
                        var_18 = load<i32>(arg_1 + 32);
                        store<i32>(arg_2 + 32, var_18)
                        var_19 = load<i32>(arg_1 + 36);
                        store<i32>(arg_2 + 36, var_19)
                        var_20 = load<i32>(arg_1 + 40);
                        store<i32>(arg_2 + 40, var_20)
                        var_21 = load<i32>(arg_1 + 44);
                        store<i32>(arg_2 + 44, var_21)
                        var_22 = load<i32>(arg_1 + 48);
                        store<i32>(arg_2 + 48, var_22)
                        var_23 = load<i32>(arg_1 + 52);
                        store<i32>(arg_2 + 52, var_23)
                        var_24 = load<i32>(arg_1 + 56);
                        store<i32>(arg_2 + 56, var_24)
                        var_25 = load<i32>(arg_1 + 60);
                        store<i32>(arg_2 + 60, var_25)
                        arg_1 += 64;
                        arg_2 += 64;
                        var_26 = (var_3 & -4) + -64;
                    } while arg_2 + 64 <=u var_26;
                }
            }
            if arg_2 <u (var_3 & -4) {
                do {
                    var_27 = load<i32>(arg_1);
                    store<i32>(arg_2, var_27)
                    arg_1 += 4;
                    arg_2 += 4;
                } while arg_2 + 4 <u (var_3 & -4);
            }
        }
        if arg_2 <u var_3 {
            do {
                var_28 = load_8u<i32>(arg_1);
                store_8<i32>(arg_2, var_28)
                arg_1 += 1;
                arg_2 += 1;
            } while arg_2 + 1 != var_3;
        }
        return arg_0;
    }
    env.emscripten_memcpy_big(arg_0, arg_1, arg_2);
    return arg_0;
}

// Function 12
fn stackSave() -> i32 {
    return global_0;
}

// Function 13
fn stackRestore(arg_0: i32) {
    global_0 = arg_0;
}

// Function 14
fn stackAlloc(arg_0: i32) -> i32 {
    let var_1: i32;
    let var_2: i32;
    
    var_1 = global_0 - arg_0 & -16;
    var_2 = global_0 - arg_0 & -16;
    global_0 = var_2;
    return var_1;
}

// Function 15
fn emscripten_stack_init() {
    global_2 = 5245824;
    global_1 = 2932 + 15 & -16;
}

// Function 16
fn emscripten_stack_get_free() -> i32 {
    return global_0 - global_1;
}

// Function 17
fn emscripten_stack_get_end() -> i32 {
    return global_1;
}

// Function 18
fn func_18(arg_0: i32) -> i32 {
    return 1;
}

// Function 19
fn func_19(arg_0: i32) {
}

// Function 20
fn func_20(arg_0: i32) {
}

// Function 21
fn func_21(arg_0: i32) {
}

// Function 22
fn func_22() -> i32 {
    func_20(2912);
    return 2920;
}

// Function 23
fn func_23() {
    func_21(2912);
}

// Function 24
fn fflush(arg_0: i32) -> i32 {
    let var_1: i32;
    let var_2: i32;
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    
    if arg_0 == 0 {
        var_1 = 0;
        if load<i32>(2924) != 0 {
            var_2 = load<i32>(2924);
            var_1 = fflush(var_2);
        }
        var_3 = func_22();
        arg_0 = load<i32>(var_3);
        if load<i32>(var_3) != 0 {
            do {
                var_4 = 0;
                if load<i32>(arg_0 + 76) >=s 0 {
                    var_4 = func_18(arg_0);
                }
                var_5 = load<i32>(arg_0 + 20);
                if var_5 >u load<i32>(arg_0 + 28) {
                    var_1 = func_25(arg_0) | var_1;
                }
                if var_4 != 0 {
                    func_19(arg_0);
                }
                arg_0 = load<i32>(arg_0 + 56);
            } while load<i32>(arg_0 + 56);
        }
        func_23();
    }
    else {
        if load<i32>(arg_0 + 76) >s -1 {
            return func_25(arg_0);
        }
        var_4 = func_18(arg_0);
        var_1 = func_25(arg_0);
        if var_4 != 0 {
            func_19(arg_0);
            return var_1;
        }
    }
    return var_1;
}

// Function 25
fn func_25(arg_0: i32) -> i32 {
    let var_1: i32;
    let var_2: i32;
    let var_3: i32;
    let var_4: i32;
    let var_5: i32;
    let var_6: i32;
    let var_7: i32;
    let var_8: i32;
    let var_9: i32;
    
    var_1 = load<i32>(arg_0 + 20);
    if var_1 >u load<i32>(arg_0 + 28) {
        var_2 = arg_0;
        var_3 = load<i32>(arg_0 + 36);
        indirect_call(var_3)(var_2, 0, 0);
        if !load<i32>(arg_0 + 20) {
            return -1;
        }
    }
    var_4 = load<i32>(arg_0 + 4);
    var_5 = load<i32>(arg_0 + 4);
    if var_5 <u load<i32>(arg_0 + 8) {
        var_6 = arg_0;
        var_7 = var_4;
        var_8 = load<i32>(arg_0 + 8);
        var_9 = load<i32>(arg_0 + 40);
        indirect_call(var_9)(var_6, extend_s<i64>(var_7 - var_8), 1);
    }
    store<i32>(arg_0 + 28, 0)
    store<i64>(arg_0 + 16, 0)
    store<i64>(arg_0 + 4, 0)
    return 0;
}

// Function 26
fn __errno_location() -> i32 {
    return 2928;
}

